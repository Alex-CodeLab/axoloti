<objdefs>
   <obj.normal id="mux 4" uuid="f2b15837b3da1785520f255bbec6709c4f253d97" sha="5c23f121916d52b90b363182e9d8097b0112aa14">
      <upgradeSha>868ef20dcb0c47514ee473fd70c3e42cf81d71b8</upgradeSha>
      <sDescription>input multiplexer. Output is i1 when s &lt; 1, i[i] when....</sDescription>
      <author>Johannes Taelman</author>
      <license>BSD</license>
      <inlets>
         <frac32 name="i0" description="input 0"/>
         <frac32 name="i1" description="input 1"/>
         <frac32 name="i2" description="input 2"/>
         <frac32 name="i3" description="input 3"/>
         <int32.positive name="s" description="select"/>
      </inlets>
      <outlets>
         <frac32 name="o" description="output"/>
      </outlets>
      <displays/>
      <params/>
      <attribs/>
      <code.krate><![CDATA[   switch(inlet_s>0?inlet_s:0){
      case 0: outlet_o= inlet_i0;break;
      case 1: outlet_o= inlet_i1;break;
      case 2: outlet_o= inlet_i2;break;
      case 3: outlet_o= inlet_i3;break;
      default: outlet_o= inlet_i3;break;
}
]]></code.krate>
   </obj.normal>
   <obj.normal id="mux 4" uuid="63881ad3ea1dba7a2d0b4cb4fa55a442888ab8c3" sha="fbbb8923dd965c395c14947cd0aac1464a19b456">
      <upgradeSha>75f06fecb427e34a1ab0a6f91706320ec1fd39ac</upgradeSha>
      <sDescription>input multiplexer. Output is i1 when s &lt; 1, i[i] when....</sDescription>
      <author>Johannes Taelman</author>
      <license>BSD</license>
      <inlets>
         <int32 name="i0" description="input 0"/>
         <int32 name="i1" description="input 1"/>
         <int32 name="i2" description="input 2"/>
         <int32 name="i3" description="input 3"/>
         <int32.positive name="s" description="select"/>
      </inlets>
      <outlets>
         <int32 name="o" description="output"/>
      </outlets>
      <displays/>
      <params/>
      <attribs/>
      <code.krate><![CDATA[   switch(inlet_s>0?inlet_s:0){
      case 0: outlet_o= inlet_i0;break;
      case 1: outlet_o= inlet_i1;break;
      case 2: outlet_o= inlet_i2;break;
      case 3: outlet_o= inlet_i3;break;
      default: outlet_o= inlet_i3;break;
}
]]></code.krate>
   </obj.normal>
   <obj.normal id="mux 4" uuid="4171cff9a0fc08b5317fccaf04acd2c06c9a9a3d" sha="87e6ab1df9a2054b87252f3b68875846b5ea1c20">
      <upgradeSha>4145bfd8751449238db95f24fb1cd2a69972d026</upgradeSha>
      <sDescription>input multiplexer. Output is i1 when s &lt; 1, i[i] when....</sDescription>
      <author>Johannes Taelman</author>
      <license>BSD</license>
      <inlets>
         <frac32buffer name="i0" description="input 0"/>
         <frac32buffer name="i1" description="input 1"/>
         <frac32buffer name="i2" description="input 2"/>
         <frac32buffer name="i3" description="input 3"/>
         <int32.positive name="s" description="select"/>
      </inlets>
      <outlets>
         <frac32buffer name="o" description="output"/>
      </outlets>
      <displays/>
      <params/>
      <attribs/>
      <code.srate><![CDATA[   switch(inlet_s>0?inlet_s:0){
      case 0: outlet_o[buffer_index]= inlet_i0[buffer_index];break;
      case 1: outlet_o[buffer_index]= inlet_i1[buffer_index];break;
      case 2: outlet_o[buffer_index]= inlet_i2[buffer_index];break;
      case 3: outlet_o[buffer_index]= inlet_i3[buffer_index];break;
      default: outlet_o[buffer_index]= inlet_i3[buffer_index];break;
}
]]></code.srate>
   </obj.normal>
   <obj.normal id="mux 4" uuid="a35d392549f1f915f483ab3cc2317a596aa78fe7" sha="2a9cda02cb3c92c65b6ca93f59d55ce2101d6351">
      <upgradeSha>ee02935bddb41185115fef2562f9468b643521af</upgradeSha>
      <sDescription>input multiplexer. Output is i1 when s &lt; 1, i[i] when....</sDescription>
      <author>Johannes Taelman</author>
      <license>BSD</license>
      <inlets>
         <bool32 name="i0" description="input 0"/>
         <bool32 name="i1" description="input 1"/>
         <bool32 name="i2" description="input 2"/>
         <bool32 name="i3" description="input 3"/>
         <int32.positive name="s" description="select"/>
      </inlets>
      <outlets>
         <bool32 name="o" description="output"/>
      </outlets>
      <displays/>
      <params/>
      <attribs/>
      <code.krate><![CDATA[   switch(inlet_s>0?inlet_s:0){
      case 0: outlet_o= inlet_i0;break;
      case 1: outlet_o= inlet_i1;break;
      case 2: outlet_o= inlet_i2;break;
      case 3: outlet_o= inlet_i3;break;
      default: outlet_o= inlet_i3;break;
}
]]></code.krate>
   </obj.normal>
   <obj.normal id="mux 4" uuid="35ebcf48b488e8d74474244d2cf9a930ee6c5c04" sha="67e49c2217e822c8e0efb7d9c6e88b95d4a28f0c">
      <upgradeSha>3a3ff53ee19aa920d58d37b15e29e53f240c7c76</upgradeSha>
      <sDescription>input multiplexer. Output is i1 when s &lt; 1, i[i] when....</sDescription>
      <author>Johannes Taelman</author>
      <license>BSD</license>
      <inlets>
         <charptr32 name="i0" description="input 0"/>
         <charptr32 name="i1" description="input 1"/>
         <charptr32 name="i2" description="input 2"/>
         <charptr32 name="i3" description="input 3"/>
         <int32.positive name="s" description="select"/>
      </inlets>
      <outlets>
         <charptr32 name="o" description="output"/>
      </outlets>
      <displays/>
      <params/>
      <attribs/>
      <code.krate><![CDATA[   switch(inlet_s>0?inlet_s:0){
      case 0: outlet_o= inlet_i0;break;
      case 1: outlet_o= inlet_i1;break;
      case 2: outlet_o= inlet_i2;break;
      case 3: outlet_o= inlet_i3;break;
      default: outlet_o= inlet_i3;break;
}
]]></code.krate>
   </obj.normal>
</objdefs>