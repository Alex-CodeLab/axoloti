<objdefs>
   <obj.normal id="knobs">
      <sDescription>C:\Users\jtaelman\Documents\GitHub\AxoStudio\patches\unsorted\guitar_amp\knobs.axp</sDescription>
      <inlets/>
      <outlets>
         <frac32 name="knob1" description="knob1" SumBuffer="false"/>
         <frac32 name="knob2" description="knob2" SumBuffer="false"/>
         <frac32 name="knob3" description="knob3" SumBuffer="false"/>
         <frac32 name="knob4" description="knob4" SumBuffer="false"/>
         <frac32 name="pedal" description="pedal" SumBuffer="false"/>
      </outlets>
      <displays/>
      <params/>
      <attribs/>
      <code.declaration><![CDATA[    static const int NPEXCH = 0;
    ParameterExchange_t PExch[NPEXCH];
    int displayVector[3];
    static const int NPRESETS = 8;
    static const int NPRESET_ENTRIES = 32;
    static const int NMODULATIONSOURCES = 8;
    static const int NMODULATIONTARGETS = 8;
    PExModulationTarget_t PExModulationSources[NMODULATIONSOURCES][NMODULATIONTARGETS];
     int32buffer inputLeft;
     int32buffer inputRight;
     int32buffer outputLeft;
     int32buffer outputRight;
/* modsource defines */
/* parameter instance indices */
/* object classes */
class instanceanalogRead4{
  public: // v1
  %parent% *parent2;
  public: void Init(%parent% * parent) {
parent2 = parent;
}
  public: void Dispose() {
}
  public: void dsp (int32_t  & out  ){
out= adcvalues[3]<<15;
}
}
;class instanceknob1{
  public: // v1
  %parent% *parent2;
int32_t _outlet;

  public: void Init(%parent% * parent) {
parent2 = parent;
}
  public: void Dispose() {
}
  public: void dsp (int32_t  outlet  ){
  _outlet = outlet;

}
}
;class instanceanalogRead4__{
  public: // v1
  %parent% *parent2;
  public: void Init(%parent% * parent) {
parent2 = parent;
}
  public: void Dispose() {
}
  public: void dsp (int32_t  & out  ){
out= adcvalues[1]<<15;
}
}
;class instanceknob2{
  public: // v1
  %parent% *parent2;
int32_t _outlet;

  public: void Init(%parent% * parent) {
parent2 = parent;
}
  public: void Dispose() {
}
  public: void dsp (int32_t  outlet  ){
  _outlet = outlet;

}
}
;class instanceanalogRead4____{
  public: // v1
  %parent% *parent2;
  public: void Init(%parent% * parent) {
parent2 = parent;
}
  public: void Dispose() {
}
  public: void dsp (int32_t  & out  ){
out= adcvalues[2]<<15;
}
}
;class instanceknob3{
  public: // v1
  %parent% *parent2;
int32_t _outlet;

  public: void Init(%parent% * parent) {
parent2 = parent;
}
  public: void Dispose() {
}
  public: void dsp (int32_t  outlet  ){
  _outlet = outlet;

}
}
;class instanceanalogRead4______{
  public: // v1
  %parent% *parent2;
  public: void Init(%parent% * parent) {
parent2 = parent;
}
  public: void Dispose() {
}
  public: void dsp (int32_t  & out  ){
out= adcvalues[0]<<15;
}
}
;class instanceknob4{
  public: // v1
  %parent% *parent2;
int32_t _outlet;

  public: void Init(%parent% * parent) {
parent2 = parent;
}
  public: void Dispose() {
}
  public: void dsp (int32_t  outlet  ){
  _outlet = outlet;

}
}
;class instanceanalogRead1{
  public: // v1
  %parent% *parent2;
  public: void Init(%parent% * parent) {
parent2 = parent;
}
  public: void Dispose() {
}
  public: void dsp (int32_t  & out  ){
out= adcvalues[5]<<15;
}
}
;class instancepedal{
  public: // v1
  %parent% *parent2;
int32_t _outlet;

  public: void Init(%parent% * parent) {
parent2 = parent;
}
  public: void Dispose() {
}
  public: void dsp (int32_t  outlet  ){
  _outlet = outlet;

}
}
;/* object instances */
     instanceanalogRead4 instanceanalogRead4_i;
     instanceknob1 instanceknob1_i;
     instanceanalogRead4__ instanceanalogRead4___i;
     instanceknob2 instanceknob2_i;
     instanceanalogRead4____ instanceanalogRead4_____i;
     instanceknob3 instanceknob3_i;
     instanceanalogRead4______ instanceanalogRead4_______i;
     instanceknob4 instanceknob4_i;
     instanceanalogRead1 instanceanalogRead1_i;
     instancepedal instancepedal_i;
/* net latches */
   static const int32_t * GetInitParams(void){
      static const int32_t p[0]= {
      };
      return &p[0];
   }   static const int32_t * GetPresets(void){
      static const int32_t p[NPRESETS][NPRESET_ENTRIES][2] = {
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         },
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         },
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         },
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         },
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         },
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         },
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         },
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         }
      };
   return &p[0][0][0];
   };
void ApplyPreset(int index){
   index--;
   if (index < NPRESETS) {
     PresetParamChange_t *pa = (PresetParamChange_t *)(GetPresets());
     PresetParamChange_t *p = &pa[index*NPRESET_ENTRIES];
       int i;
       for(i=0;i<NPRESET_ENTRIES;i++){
         PresetParamChange_t *pp = &p[i];
           if ((pp->pexIndex>=0)&&(pp->pexIndex<NPEXCH)) {
               int v = pp->value - PExch[pp->pexIndex].value;
               PExch[pp->pexIndex].value = pp->value;
               PExch[pp->pexIndex].modvalue +=v;
               PExch[pp->pexIndex].signals = 0xFFEF;
               if (PExch[pp->pexIndex].pfunction) {
                  PExch[pp->pexIndex].finalvalue = (PExch[pp->pexIndex].pfunction)(PExch[pp->pexIndex].modvalue,pp->pexIndex);
               } else {
                  PExch[pp->pexIndex].finalvalue = PExch[pp->pexIndex].modvalue;
               }           }
           else break;
       }
   }}
]]></code.declaration>
      <code.init><![CDATA[   instanceanalogRead4_i.Init(this);
   instanceknob1_i.Init(this);
   instanceanalogRead4___i.Init(this);
   instanceknob2_i.Init(this);
   instanceanalogRead4_____i.Init(this);
   instanceknob3_i.Init(this);
   instanceanalogRead4_______i.Init(this);
   instanceknob4_i.Init(this);
   instanceanalogRead1_i.Init(this);
   instancepedal_i.Init(this);
   int i;
   int j;
   const int32_t *p;
   p = GetInitParams();
   for(j=0;j<0;j++){
      PExch[j].value = p[j];
      PExch[j].modvalue = p[j];
      PExch[j].signals = 0;
      PExch[j].pfunction = 0;
      PExch[j].finalvalue = p[j];
   }
     displayVector[0] = 0x446F7841;
     displayVector[1] = 0;
     displayVector[2] = 0;
]]></code.init>
      <code.krate><![CDATA[int i; /*...*/
//--------- <nets> -----------//
    int32_t  net0;
    int32_t  net1;
    int32_t  net2;
    int32_t  net3;
    int32_t  net4;
//--------- </nets> ----------//
//--------- <zero> ----------//
  int32_t UNCONNECTED_OUTPUT;
  int32_t UNCONNECTED_INPUT=0;
  int32buffer zerobuffer;
  for(i=0;i<BUFSIZE;i++) zerobuffer[i]=0;
  int32buffer UNCONNECTED_OUTPUT_BUFFER;
//--------- </zero> ----------//
//--------- <object calls> ----------//
  instanceanalogRead4_i.dsp(net0);
  instanceknob1_i.dsp(net0);
  instanceanalogRead4___i.dsp(net1);
  instanceknob2_i.dsp(net1);
  instanceanalogRead4_____i.dsp(net3);
  instanceknob3_i.dsp(net3);
  instanceanalogRead4_______i.dsp(net2);
  instanceknob4_i.dsp(net2);
  instanceanalogRead1_i.dsp(net4);
  instancepedal_i.dsp(net4);
//--------- </object calls> ----------//
//--------- <net latch copy> ----------//
//--------- </net latch copy> ----------//
   %knob1% = instanceknob1_i._outlet;
   %knob2% = instanceknob2_i._outlet;
   %knob3% = instanceknob3_i._outlet;
   %knob4% = instanceknob4_i._outlet;
   %pedal% = instancepedal_i._outlet;
]]></code.krate>
      <code.midicc><![CDATA[   if (channel == MIDICHANNEL){
   }
]]></code.midicc>
      <code.midinoteon><![CDATA[   if (channel == MIDICHANNEL){
   }
]]></code.midinoteon>
      <code.midinoteoff><![CDATA[   if (channel == MIDICHANNEL){
   }
]]></code.midinoteoff>
   </obj.normal>
</objdefs>