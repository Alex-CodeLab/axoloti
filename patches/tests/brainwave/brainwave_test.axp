<patch-1.0>
   <comment type="comment" sha="sha" name="connect mindflex ground to Axoloti gnd" x="0" y="0"/>
   <comment type="comment" sha="sha" name="cfr. http://frontiernerds.com/brain-hack" x="240" y="0"/>
   <comment type="comment" sha="sha" name="and mindflex T to Axxoloti PA3" x="40" y="20"/>
   <comment type="comment" sha="sha" name="FOR SAFETY: only use with equipment disconnected from mains (laptop/Axoloti running on battery,,,)" x="240" y="20"/>
   <comment type="comment" sha="sha" name="just some nonsense sound generation..." x="760" y="40"/>
   <obj type="serial.begin" sha="f0df278a5fd5140e32239828049a8e062059f391" name="serial.begin_1" x="0" y="60">
      <params/>
      <attribs>
         <combo attributeName="baudrate" selection="9600"/>
      </attribs>
   </obj>
   <obj type="osc" sha="6215955d70f249301aa4141e75bdbc58d2782ae6" name="osc_1" x="800" y="60">
      <params>
         <frac32.s.map name="pitch" value="-20.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="*c" sha="1ea155bb99343babad87e3ff0de80e6bf568e8da" name="*c_1" x="920" y="60">
      <params>
         <frac32.u.map name="amp" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="brainwave" sha="c6114a6dfbeaf9a2309546a89fcd85e69ab7eee4" name="brainwave_1" x="0" y="120">
      <params/>
      <attribs>
         <text attributeName="script">
            <sText><![CDATA[// mostly taken from kitschpatrol Arduino Brain library

static const int MAX_PACKET_LENGTH = 32;
static const int EEG_POWER_BANDS = 8;
uint8_t packetData[MAX_PACKET_LENGTH];
bool inPacket;
//uint8_t latestByte;
uint8_t lastByte;
uint8_t packetIndex;
uint8_t packetLength;
uint8_t checksum;
uint8_t checksumAccumulator;
uint8_t eegPowerLength;
bool hasPower;
bool freshPacket;

uint32_t eegPower[EEG_POWER_BANDS];


void clearPacket() {
	for (uint8_t i = 0; i < MAX_PACKET_LENGTH; i++) {
		packetData[i] = 0;
	}
}

void clearEegPower() {
// Zero the power bands.
	for(uint8_t i = 0; i < EEG_POWER_BANDS; i++) {
		eegPower[i] = 0;
	}
}

bool parsePacket() {
// Loop through the packet, extracting data.
// Based on mindset_communications_protocol.pdf from the Neurosky Mindset SDK.
// Returns true if passing succeeds
	hasPower = false;
	bool parseSuccess = true;
	int rawValue = 0;
	clearEegPower(); // clear the eeg power to make sure we're honest about missing values
	for (uint8_t i = 0; i < packetLength; i++) {
		switch (packetData[i]) {
		case 0x2:
			_quality = (packetData[++i])<<19;
			break;
		case 0x4:
			_attention = (packetData[++i])<<19;
			break;
		case 0x5:
			_meditation = (packetData[++i])<<19;
			break;
		case 0x83:
			// ASIC_EEG_POWER: eight big-endian 3-uint8_t unsigned integer values representing delta, theta, low-alpha high-alpha, low-beta, high-beta, low-gamma, and mid-gamma EEG band power values
			// The next uint8_t sets the length, usually 24 (Eight 24-bit numbers... big endian?)
			// We dont' use this value so let's skip it and just increment i
			i++;
			// Extract the values
			for (int j = 0; j < EEG_POWER_BANDS; j++) {
			eegPower[j] = ((uint32_t)packetData[++i] << 16) | ((uint32_t)packetData[++i] << 8) | (uint32_t)packetData[++i];
			}
			hasPower = true;
			// This seems to happen once during start-up on the force trainer. Strange. Wise to wait a couple of packets before
			// you start reading.
			break;
		case 0x80:
			// We dont' use this value so let's skip it and just increment i
			// uint8_t packetLength = packetData[++i];
			i++;
			rawValue = ((int)packetData[++i] << 8) | packetData[++i];
			break;
		default:
			// Broken packet ?
			/*
			Serial.print(F("parsePacket UNMATCHED data 0x"));
			Serial.print(packetData[i], HEX);
			Serial.print(F(" in position "));
			Serial.print(i, DEC);
			printPacket();
			*/
			parseSuccess = false;
			break;
		}
	}
	return parseSuccess;
}

void setup(void){
	freshPacket = false;
	inPacket = false;
	packetIndex = 0;
	packetLength = 0;
	eegPowerLength = 0;
	hasPower = false;
	checksum = 0;
	checksumAccumulator = 0;
	_quality = 200;
	_attention = 0;
	_meditation = 0;
	clearEegPower();
}

bool parseChar(uint8_t latestByte){
	 // Build a packet if we know we're and not just listening for sync bytes.
	if (inPacket) {
		// First byte after the sync bytes is the length of the upcoming packet.
		if (packetIndex == 0) {
			packetLength = latestByte;
			// Catch error if packet is too long
			if (packetLength > MAX_PACKET_LENGTH) {
				// Packet exceeded max length
				// Send an error
				//sprintf(latestError, "ERROR: Packet too long %i", packetLength);
				LogTextMessage("ERROR: Packet too long");
				inPacket = false;
			}
		}
		else if (packetIndex <= packetLength) {
			// Run of the mill data bytes.
			// Print them here
			// Store the byte in an array for parsing later.
			packetData[packetIndex - 1] = latestByte;
			// Keep building the checksum.
			checksumAccumulator += latestByte;
		}
		else if (packetIndex > packetLength) {
			// We're at the end of the data payload.
			// Check the checksum.
			checksum = latestByte;
			checksumAccumulator = 255 - checksumAccumulator;
			// Do they match?
			if (checksum == checksumAccumulator) {
				bool parseSuccess = parsePacket();
				if (parseSuccess) {
					freshPacket = true;
				}
				else {
					// Parsing failed, send an error.
//					sprintf(latestError, "ERROR: Could not parse");
				LogTextMessage("ERROR: Could not parse");
					
					// good place to print the packet if debugging
				}
			}
			else {
				// Checksum mismatch, send an error.
//				sprintf(latestError, "ERROR: Checksum");
				LogTextMessage("ERROR: Checksum");
				// good place to print the packet if debugging
			}
			// End of packet
			// Reset, prep for next packet
			inPacket = false;
		}
		packetIndex++;
	}
	// Look for the start of the packet
	if ((latestByte == 170) && (lastByte == 170) && !inPacket) {
		// Start of packet
		inPacket = true;
		packetIndex = 0;
		checksumAccumulator = 0;
	}
	// Keep track of the last byte so we can find the sync byte pairs.
	lastByte = latestByte;
}

void loop(void) {
    char ch = sdGet(&SD2);
    parseChar(ch);
	const int sh = 6;
	_delta = eegPower[0]<<sh;
	_theta = eegPower[1]<<sh;
	_low_alpha = eegPower[2]<<sh;
	_high_alpha = eegPower[3]<<sh;
	_low_beta = eegPower[4]<<sh;
	_high_beta = eegPower[5]<<sh;
	_low_gamma = eegPower[6]<<sh;
	_high_gamma = eegPower[7]<<sh;
}]]></sText>
         </text>
      </attribs>
   </obj>
   <obj type="scopeU" sha="8f2bc320aef06b8fef20b6dd1e928025aa9b067" name="quality" x="260" y="120">
      <params/>
      <attribs/>
   </obj>
   <obj type="scopeU" sha="8f2bc320aef06b8fef20b6dd1e928025aa9b067" name="low_alpha" x="480" y="120">
      <params/>
      <attribs/>
   </obj>
   <obj type="scopeU" sha="8f2bc320aef06b8fef20b6dd1e928025aa9b067" name="high_alpha" x="560" y="120">
      <params/>
      <attribs/>
   </obj>
   <obj type="lowpass" sha="590df048ba2f7ab209a2bd1e88e49c2aae1051e0" name="lowpass_1" x="760" y="140">
      <params>
         <frac32.s.map name="freq" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="mix2" sha="90ac1a48634cb998bf3d0387eb5191531d6241fe" name="mix2_1" x="860" y="140">
      <params>
         <frac32.u.map name="gain1" value="63.5"/>
         <frac32.u.map name="gain2" value="63.5"/>
      </params>
      <attribs/>
   </obj>
   <obj type="osc~" sha="57fd153c89df1299ed1ecbe27c961ac52732ab5" name="osc~_1" x="960" y="140">
      <params>
         <frac32.s.map name="pitch" value="-12.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="scopeU" sha="8f2bc320aef06b8fef20b6dd1e928025aa9b067" name="attention" x="260" y="240">
      <params/>
      <attribs/>
   </obj>
   <obj type="scopeU" sha="8f2bc320aef06b8fef20b6dd1e928025aa9b067" name="low_beta" x="480" y="240">
      <params/>
      <attribs/>
   </obj>
   <obj type="scopeU" sha="8f2bc320aef06b8fef20b6dd1e928025aa9b067" name="high_beta" x="560" y="240">
      <params/>
      <attribs/>
   </obj>
   <obj type="lowpass" sha="590df048ba2f7ab209a2bd1e88e49c2aae1051e0" name="lowpass_2" x="760" y="280">
      <params>
         <frac32.s.map name="freq" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="mix2" sha="90ac1a48634cb998bf3d0387eb5191531d6241fe" name="mix2_2" x="860" y="280">
      <params>
         <frac32.u.map name="gain1" value="63.5"/>
         <frac32.u.map name="gain2" value="63.5"/>
      </params>
      <attribs/>
   </obj>
   <obj type="osc~" sha="57fd153c89df1299ed1ecbe27c961ac52732ab5" name="osc~_2" x="960" y="280">
      <params>
         <frac32.s.map name="pitch" value="-12.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="scopeU" sha="8f2bc320aef06b8fef20b6dd1e928025aa9b067" name="meditation" x="260" y="360">
      <params/>
      <attribs/>
   </obj>
   <obj type="scopeU" sha="8f2bc320aef06b8fef20b6dd1e928025aa9b067" name="low_gamma" x="480" y="360">
      <params/>
      <attribs/>
   </obj>
   <obj type="scopeU" sha="8f2bc320aef06b8fef20b6dd1e928025aa9b067" name="high_gamma" x="560" y="360">
      <params/>
      <attribs/>
   </obj>
   <obj type="lowpass" sha="590df048ba2f7ab209a2bd1e88e49c2aae1051e0" name="lowpass_3" x="760" y="420">
      <params>
         <frac32.s.map name="freq" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="mix2" sha="90ac1a48634cb998bf3d0387eb5191531d6241fe" name="mix2_3" x="860" y="420">
      <params>
         <frac32.u.map name="gain1" value="63.5"/>
         <frac32.u.map name="gain2" value="63.5"/>
      </params>
      <attribs/>
   </obj>
   <obj type="osc~" sha="57fd153c89df1299ed1ecbe27c961ac52732ab5" name="osc~_3" x="960" y="420">
      <params>
         <frac32.s.map name="pitch" value="-12.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="scopeU" sha="8f2bc320aef06b8fef20b6dd1e928025aa9b067" name="delta" x="480" y="480">
      <params/>
      <attribs/>
   </obj>
   <obj type="*c" sha="d36ecbd55095f4888a0ebda8efda68e015c5e72b" name="*c_2" x="1120" y="500">
      <params>
         <frac32.u.map name="amp" value="63.5"/>
      </params>
      <attribs/>
   </obj>
   <obj type="lowpass" sha="590df048ba2f7ab209a2bd1e88e49c2aae1051e0" name="lowpass_4" x="760" y="560">
      <params>
         <frac32.s.map name="freq" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="mix2" sha="90ac1a48634cb998bf3d0387eb5191531d6241fe" name="mix2_4" x="860" y="560">
      <params>
         <frac32.u.map name="gain1" value="63.5"/>
         <frac32.u.map name="gain2" value="63.5"/>
      </params>
      <attribs/>
   </obj>
   <obj type="osc~" sha="57fd153c89df1299ed1ecbe27c961ac52732ab5" name="osc~_4" x="960" y="560">
      <params>
         <frac32.s.map name="pitch" value="-12.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="scopeU" sha="8f2bc320aef06b8fef20b6dd1e928025aa9b067" name="theta" x="480" y="600">
      <params/>
      <attribs/>
   </obj>
   <obj type="mix6" sha="3cb483397ed6c25c361f7edaf34ef8c382a71183" name="mix6_1" x="1120" y="600">
      <params>
         <frac32.u.map name="gain1" value="10.0"/>
         <frac32.u.map name="gain2" value="10.0"/>
         <frac32.u.map name="gain3" value="10.0"/>
         <frac32.u.map name="gain4" value="10.0"/>
         <frac32.u.map name="gain5" value="10.0"/>
         <frac32.u.map name="gain6" value="10.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="flanger" sha="52711f802ca3fbe29bd7b59ff53f4c63a1192cfb" name="flanger_1" x="1260" y="620">
      <params>
         <frac32.u.map name="depth" value="20.0"/>
         <frac32.u.map name="fdbk" value="40.0"/>
         <frac32.s.map name="speed" value="-56.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="dac~" sha="b933bb91801a126126313c11f773158b5ca2face" name="dac~_1" x="1380" y="620">
      <params/>
      <attribs/>
   </obj>
   <obj type="lowpass" sha="590df048ba2f7ab209a2bd1e88e49c2aae1051e0" name="lowpass_5" x="760" y="700">
      <params>
         <frac32.s.map name="freq" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="mix2" sha="90ac1a48634cb998bf3d0387eb5191531d6241fe" name="mix2_5" x="860" y="700">
      <params>
         <frac32.u.map name="gain1" value="63.5"/>
         <frac32.u.map name="gain2" value="63.5"/>
      </params>
      <attribs/>
   </obj>
   <obj type="osc~" sha="57fd153c89df1299ed1ecbe27c961ac52732ab5" name="osc~_5" x="960" y="700">
      <params>
         <frac32.s.map name="pitch" value="-12.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="lowpass" sha="590df048ba2f7ab209a2bd1e88e49c2aae1051e0" name="lowpass_6" x="760" y="840">
      <params>
         <frac32.s.map name="freq" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="mix2" sha="90ac1a48634cb998bf3d0387eb5191531d6241fe" name="mix2_6" x="860" y="840">
      <params>
         <frac32.u.map name="gain1" value="63.5"/>
         <frac32.u.map name="gain2" value="63.5"/>
      </params>
      <attribs/>
   </obj>
   <obj type="osc~" sha="57fd153c89df1299ed1ecbe27c961ac52732ab5" name="osc~_6" x="960" y="840">
      <params>
         <frac32.s.map name="pitch" value="-12.0"/>
      </params>
      <attribs/>
   </obj>
   <nets>
      <net>
         <source name="brainwave_1 quality"/>
         <dest name="quality in"/>
      </net>
      <net>
         <source name="brainwave_1 attention"/>
         <dest name="attention in"/>
      </net>
      <net>
         <source name="brainwave_1 meditation"/>
         <dest name="meditation in"/>
      </net>
      <net>
         <source name="brainwave_1 low_alpha"/>
         <dest name="low_alpha in"/>
         <dest name="lowpass_1 in"/>
      </net>
      <net>
         <source name="brainwave_1 high_alpha"/>
         <dest name="high_alpha in"/>
         <dest name="lowpass_2 in"/>
      </net>
      <net>
         <source name="brainwave_1 low_beta"/>
         <dest name="low_beta in"/>
         <dest name="lowpass_3 in"/>
      </net>
      <net>
         <source name="brainwave_1 high_beta"/>
         <dest name="high_beta in"/>
         <dest name="lowpass_4 in"/>
      </net>
      <net>
         <source name="brainwave_1 low_gamma"/>
         <dest name="low_gamma in"/>
         <dest name="lowpass_5 in"/>
      </net>
      <net>
         <source name="brainwave_1 high_gamma"/>
         <dest name="high_gamma in"/>
         <dest name="lowpass_6 in"/>
      </net>
      <net>
         <source name="brainwave_1 delta"/>
         <dest name="delta in"/>
         <dest name="osc_1 pitchm"/>
      </net>
      <net>
         <source name="brainwave_1 theta"/>
         <dest name="theta in"/>
      </net>
      <net>
         <source name="osc~_1 wave"/>
         <dest name="mix6_1 in1"/>
      </net>
      <net>
         <source name="osc~_2 wave"/>
         <dest name="mix6_1 in2"/>
      </net>
      <net>
         <source name="osc~_3 wave"/>
         <dest name="mix6_1 in3"/>
      </net>
      <net>
         <source name="osc~_4 wave"/>
         <dest name="mix6_1 in4"/>
      </net>
      <net>
         <source name="osc~_5 wave"/>
         <dest name="mix6_1 in5"/>
      </net>
      <net>
         <source name="osc~_6 wave"/>
         <dest name="mix6_1 in6"/>
      </net>
      <net>
         <source name="mix6_1 out"/>
         <dest name="flanger_1 in"/>
      </net>
      <net>
         <source name="osc_1 wave"/>
         <dest name="*c_1 in"/>
      </net>
      <net>
         <source name="lowpass_1 out"/>
         <dest name="mix2_1 in1"/>
      </net>
      <net>
         <source name="*c_1 out"/>
         <dest name="mix2_1 in2"/>
         <dest name="mix2_2 in2"/>
         <dest name="mix2_3 in2"/>
         <dest name="mix2_4 in2"/>
         <dest name="mix2_5 in2"/>
         <dest name="mix2_6 in2"/>
      </net>
      <net>
         <source name="mix2_1 out"/>
         <dest name="osc~_1 pitchm"/>
      </net>
      <net>
         <source name="lowpass_2 out"/>
         <dest name="mix2_2 in1"/>
      </net>
      <net>
         <source name="lowpass_3 out"/>
         <dest name="mix2_3 in1"/>
      </net>
      <net>
         <source name="mix2_2 out"/>
         <dest name="osc~_2 pitchm"/>
      </net>
      <net>
         <source name="mix2_3 out"/>
         <dest name="osc~_3 pitchm"/>
      </net>
      <net>
         <source name="lowpass_4 out"/>
         <dest name="mix2_4 in1"/>
      </net>
      <net>
         <source name="mix2_4 out"/>
         <dest name="osc~_4 pitchm"/>
      </net>
      <net>
         <source name="lowpass_5 out"/>
         <dest name="mix2_5 in1"/>
      </net>
      <net>
         <source name="mix2_5 out"/>
         <dest name="osc~_5 pitchm"/>
      </net>
      <net>
         <source name="lowpass_6 out"/>
         <dest name="mix2_6 in1"/>
      </net>
      <net>
         <source name="mix2_6 out"/>
         <dest name="osc~_6 pitchm"/>
      </net>
      <net>
         <source name="*c_2 out"/>
         <dest name="osc~_1 pm"/>
         <dest name="osc~_2 pm"/>
         <dest name="osc~_3 pm"/>
         <dest name="osc~_4 pm"/>
         <dest name="osc~_5 pm"/>
         <dest name="osc~_6 pm"/>
      </net>
      <net>
         <source name="flanger_1 out"/>
         <dest name="*c_2 in"/>
         <dest name="dac~_1 left"/>
         <dest name="dac~_1 right"/>
      </net>
   </nets>
   <settings>
      <subpatchmode>no</subpatchmode>
   </settings>
   <notes><![CDATA[]]></notes>
</patch-1.0>