<objdefs>
   <obj.normal id="additive_sub">
      <sDescription>C:\Users\jtaelman\Documents\GitHub\AxoStudio\patches\tests\additive_sub.axp</sDescription>
      <inlets>
         <frac32 name="freq" description="freq"/>
         <frac32 name="ratio" description="ratio"/>
      </inlets>
      <outlets>
         <frac32buffer name="out" description="out" SumBuffer="false"/>
      </outlets>
      <displays/>
      <params>
         <frac32.u.map name="_star_c1">
            <MinValue v="0.0"/>
            <MaxValue v="63.5"/>
         </frac32.u.map>
      </params>
      <attribs>
         <combo name="poly">
            <MenuEntries>
               <string>1</string>
               <string>2</string>
               <string>3</string>
               <string>4</string>
               <string>5</string>
               <string>6</string>
               <string>7</string>
               <string>8</string>
               <string>9</string>
               <string>10</string>
               <string>11</string>
               <string>12</string>
               <string>13</string>
               <string>14</string>
               <string>15</string>
               <string>16</string>
            </MenuEntries>
            <CEntries>
               <string>1</string>
               <string>2</string>
               <string>3</string>
               <string>4</string>
               <string>5</string>
               <string>6</string>
               <string>7</string>
               <string>8</string>
               <string>9</string>
               <string>10</string>
               <string>11</string>
               <string>12</string>
               <string>13</string>
               <string>14</string>
               <string>15</string>
               <string>16</string>
            </CEntries>
         </combo>
      </attribs>
      <code.declaration><![CDATA[   static const int32_t * GetInitParams(void){
      static const int32_t p[2]= {
      0,
      0
      };
      return &p[0];
   }    static const int NPEXCH = 2;
    ParameterExchange_t PExch[NPEXCH];
    int displayVector[3];
    static const int NPRESETS = 8;
    static const int NPRESET_ENTRIES = 32;
    static const int NMODULATIONSOURCES = 8;
    static const int NMODULATIONTARGETS = 8;
    PExModulationTarget_t PExModulationSources[NMODULATIONSOURCES][NMODULATIONTARGETS];
   static const int32_t * GetPresets(void){
      static const int32_t p[NPRESETS][NPRESET_ENTRIES][2] = {
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         },
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         },
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         },
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         },
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         },
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         },
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         },
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         }
      };
   return &p[0][0][0];
   };
void ApplyPreset(int index){
   index--;
   if (index < NPRESETS) {
     PresetParamChange_t *pa = (PresetParamChange_t *)(GetPresets());
     PresetParamChange_t *p = &pa[index*NPRESET_ENTRIES];
       int i;
       for(i=0;i<NPRESET_ENTRIES;i++){
         PresetParamChange_t *pp = &p[i];
           if ((pp->pexIndex>=0)&&(pp->pexIndex<NPEXCH)) {
               int v = pp->value - PExch[pp->pexIndex].value;
               PExch[pp->pexIndex].value = pp->value;
               PExch[pp->pexIndex].modvalue +=v;
               PExch[pp->pexIndex].signals = 0xFFEF;
               if (PExch[pp->pexIndex].pfunction) {
                  PExch[pp->pexIndex].finalvalue = (PExch[pp->pexIndex].pfunction)(PExch[pp->pexIndex].modvalue,pp->pexIndex);
               } else {
                  PExch[pp->pexIndex].finalvalue = PExch[pp->pexIndex].modvalue;
               }           }
           else break;
       }
   }}
class voice {
   public:
   int polyIndex;
    static const int NPEXCH = 2;
    ParameterExchange_t PExch[NPEXCH];
    int displayVector[3];
    static const int NPRESETS = 8;
    static const int NPRESET_ENTRIES = 32;
    static const int NMODULATIONSOURCES = 8;
    static const int NMODULATIONTARGETS = 8;
    PExModulationTarget_t PExModulationSources[NMODULATIONSOURCES][NMODULATIONTARGETS];
/* modsource defines */
/* parameter instance indices */
static const int PARAM_INDEX_osc0__1_freq = 0;
static const int PARAM_INDEX__star_c1_amp = 1;
/* object classes */
class instancepolyindex1{
  public: // v1
  voice *parent2;
  public: void Init(voice * parent) {
parent2 = parent;
}
  public: void Dispose() {
}
  public: void dsp (int32_t & index  ){
index = parent2->polyIndex;

}
}
;class instance_plus_1{
  public: // v1
  voice *parent2;
  public: void Init(voice * parent) {
parent2 = parent;
}
  public: void Dispose() {
}
  public: void dsp (int32_t a,
    int32_t & result  ){
result= a+1;
}
}
;class instancefreq{
  public: // v1
  voice *parent2;
int32_t _inlet;

  public: void Init(voice * parent) {
parent2 = parent;
}
  public: void Dispose() {
}
  public: void dsp (int32_t  & inlet  ){
  inlet = _inlet;

}
}
;class instance_star_1{
  public: // v1
  voice *parent2;
  public: void Init(voice * parent) {
parent2 = parent;
}
  public: void Dispose() {
}
  public: void dsp (int32_t a,
    int32_t  b,
    int32_t  & result  ){
result= a*b;

}
}
;class instanceratio{
  public: // v1
  voice *parent2;
int32_t _inlet;

  public: void Init(voice * parent) {
parent2 = parent;
}
  public: void Dispose() {
}
  public: void dsp (int32_t  & inlet  ){
  inlet = _inlet;

}
}
;class instance_star_2{
  public: // v1
  voice *parent2;
  public: void Init(voice * parent) {
parent2 = parent;
}
  public: void Dispose() {
}
  public: void dsp (int32_t a,
    int32_t  b,
    int32_t  & result  ){
result= a*b;

}
}
;class instance_dash_1{
  public: // v1
  voice *parent2;
  public: void Init(voice * parent) {
parent2 = parent;
}
  public: void Dispose() {
}
  public: void dsp (int32_t  in1,
    int32_t  in2,
    int32_t  & out  ){
out= in1-in2 ;
}
}
;class instanceosc0__1{
  public: // v1
  voice *parent2;
KeyValuePair KVP_instanceosc0__1_freq;
uint32_t Phase; 
  public: void Init(voice * parent) {
parent2 = parent;
Phase = 0;
}
  public: void Dispose() {
}
  public: void dsp (int32_t  freqm,
    int32buffer  pm,
    int32buffer  & wave  ){
int buffer_index;
for(buffer_index=0;buffer_index<BUFSIZE;buffer_index++) {
Phase += (parent2->PExch[0].finalvalue + freqm)<<4;
int32_t r;
int32_t p2 = Phase + (pm[buffer_index]<<4);
SINE2TINTERP(p2,r)
wave[buffer_index]= (r>>4);

}
}
}
;class instance_star_c1{
  public: // v1
  voice *parent2;
KeyValuePair KVP_instance_star_c1_amp;
  public: void Init(voice * parent) {
parent2 = parent;
}
  public: void Dispose() {
}
  public: void dsp (int32buffer  in,
    int32buffer  & out  ){
int buffer_index;
for(buffer_index=0;buffer_index<BUFSIZE;buffer_index++) {
out[buffer_index]= ___SMMUL(parent2->common->%_star_c1%<<3,in[buffer_index]<<2);

}
}
}
;class instanceout{
  public: // v1
  voice *parent2;
int32buffer _outlet;

  public: void Init(voice * parent) {
parent2 = parent;
}
  public: void Dispose() {
}
  public: void dsp (int32buffer  outlet  ){
int buffer_index;
for(buffer_index=0;buffer_index<BUFSIZE;buffer_index++) {
   _outlet[buffer_index] = outlet[buffer_index];

}
}
}
;/* object instances */
     instancepolyindex1 instancepolyindex1_i;
     instance_plus_1 instance_plus_1_i;
     instancefreq instancefreq_i;
     instance_star_1 instance_star_1_i;
     instanceratio instanceratio_i;
     instance_star_2 instance_star_2_i;
     instance_dash_1 instance_dash_1_i;
     instanceosc0__1 instanceosc0__1_i;
     instance_star_c1 instance_star_c1_i;
     instanceout instanceout_i;
/* net latches */
%parent% *common;
void Init(voice *parent) {
   instancepolyindex1_i.Init(parent);
   instance_plus_1_i.Init(parent);
   instancefreq_i.Init(parent);
   instance_star_1_i.Init(parent);
   instanceratio_i.Init(parent);
   instance_star_2_i.Init(parent);
   instance_dash_1_i.Init(parent);
   instanceosc0__1_i.Init(parent);
   instance_star_c1_i.Init(parent);
   instanceout_i.Init(parent);
}

void dsp (void) {
 int i;
//--------- <nets> -----------//
    int32_t net0;
    int32_t  net1;
    int32_t net2;
    int32_t  net3;
    int32_t  net4;
    int32_t  net5;
    int32_t  net6;
    int32buffer  net7;
    int32buffer  net8;
//--------- </nets> ----------//
//--------- <zero> ----------//
  int32_t UNCONNECTED_OUTPUT;
  int32_t UNCONNECTED_INPUT=0;
  int32buffer zerobuffer;
  for(i=0;i<BUFSIZE;i++) zerobuffer[i]=0;
  int32buffer UNCONNECTED_OUTPUT_BUFFER;
//--------- </zero> ----------//
//--------- <object calls> ----------//
  instancepolyindex1_i.dsp(net0);
  instance_plus_1_i.dsp(net0, net2);
  instancefreq_i.dsp(net1);
  instance_star_1_i.dsp(net2, net1, net4);
  instanceratio_i.dsp(net3);
  instance_star_2_i.dsp(net0, net3, net5);
  instance_dash_1_i.dsp(net4, net5, net6);
  instanceosc0__1_i.dsp(net6, zerobuffer, net7);
  instance_star_c1_i.dsp(net7, net8);
  instanceout_i.dsp(net8);
//--------- </object calls> ----------//
//--------- <net latch copy> ----------//
//--------- </net latch copy> ----------//
}
void PatchMidiInControlChange(uint8_t channel, uint8_t cc, uint8_t val){
   if (channel == MIDICHANNEL){
   }
}

void PatchMidiInNoteOn(uint8_t channel, uint8_t note, uint8_t velocity){
   if (channel == MIDICHANNEL){
   }
}

void PatchMidiInNoteOff(uint8_t channel, uint8_t note, uint8_t velocity){
   if (channel == MIDICHANNEL){
   }
}

void PatchMidiInPitchBend(uint8_t channel, uint8_t data1, uint8_t data2){
   if (channel == MIDICHANNEL){
   }
}

void PatchMidiInAllNotesOff(uint8_t channel){
   if (channel == MIDICHANNEL){
   }
}

void PatchMidiInResetControllers(uint8_t channel){
   if (channel == MIDICHANNEL){
   }
   }
};
static voice * getVoices(void){
     static voice v[%poly%];
    return v;
}
static int32_t PropagateToVoices(int32_t modvalue, int32_t index) {
    if ((index>=0)&&(index<NPEXCH)) {
       int vi;
       for(vi=0;vi<%poly%;vi++){
         ParameterExchange_t *pex = &(getVoices()[vi].PExch[index]);
         pex->modvalue -= pex->value;
         pex->value = modvalue;
         pex->modvalue += modvalue;
         pex->signals = 0xFFFFFFEE;
//         if (pex->pfunction) {
//          pex->finalvalue =  (pex->pfunction)(pex->modvalue,index);
//         } else {
           pex->finalvalue = pex->modvalue;
//         }
       }
    }
    return modvalue;
}
int8_t notePlaying[%poly%];
int32_t voicePriority[%poly%];
int32_t priority;
]]></code.declaration>
      <code.init><![CDATA[   int i;
   int j;
   const int32_t *p;
   p = GetInitParams();
   for(j=0;j<2;j++){
      PExch[j].value = p[j];
      PExch[j].modvalue = p[j];
      PExch[j].signals = 0;
      PExch[j].pfunction = 0;
      PExch[j].finalvalue = p[j];
   }
     displayVector[0] = 0x446F7841;
     displayVector[1] = 0;
     displayVector[2] = 0;
int k;
   for(k=0;k<NPEXCH;k++){
      PExch[k].pfunction = PropagateToVoices;
   }int vi; for(vi=0;vi<%poly%;vi++) {
   voice *v = &getVoices()[vi];
   v->polyIndex = vi;
   v->common = this;
   v->Init(&getVoices()[vi]);
   notePlaying[vi]=0;
   voicePriority[vi]=0;
   for (j = 0; j < %poly%; j++) {
      v->PExch[j].value = p[j];
      v->PExch[j].modvalue = p[j];
      v->PExch[j].signals = 0;
      v->PExch[j].pfunction = 0;
      v->PExch[j].finalvalue = p[j];
   }
}
priority=0;
]]></code.init>
      <code.krate><![CDATA[{
      int j;
      for(j=0;j<BUFSIZE;j++) %out%[j] = 0;
}
int vi; for(vi=0;vi<%poly%;vi++) {   getVoices()[vi].instancefreq_i._inlet = %freq%;
   getVoices()[vi].instanceratio_i._inlet = %ratio%;
getVoices()[vi].dsp();
{
      int j;
      for(j=0;j<BUFSIZE;j++) %out%[j] += getVoices()[vi].instanceout_i._outlet[j];
}
}
]]></code.krate>
      <code.midicc><![CDATA[int i;   for(i=0;i<%poly%;i++) getVoices()[i].PatchMidiInControlChange(channel, cc, val);
]]></code.midicc>
      <code.midinoteon><![CDATA[        int min = 1<<30;
        int mini = 0;
        int i;
        for(i=0;i<%poly%;i++){
          if (voicePriority[i] < min){
            min = voicePriority[i];
            mini = i;
          }
        }
voicePriority[mini] = 10000+priority++;
notePlaying[mini] = note;
getVoices()[mini].PatchMidiInNoteOn(channel, note, velocity);
]]></code.midinoteon>
      <code.midinoteoff><![CDATA[int i;
for(i=0;i<%poly%;i++){
      if (notePlaying[i] == note){
        getVoices()[i].PatchMidiInNoteOff(channel, note, velocity);
        voicePriority[i] = priority++;
        notePlaying[i] = -1;
}
}
]]></code.midinoteoff>
   </obj.normal>
</objdefs>