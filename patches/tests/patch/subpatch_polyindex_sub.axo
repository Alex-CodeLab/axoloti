<objdefs>
   <obj.normal id="subpatch_polyindex_sub">
      <sDescription>C:\Users\jtaelman\Documents\GitHub\AxoStudio\patches\tests\subpatch_polyindex_sub.axp</sDescription>
      <inlets/>
      <outlets>
         <frac32 name="polyIndexSum" description="polyIndexSum" SumBuffer="false"/>
         <frac32 name="oneSum" description="oneSum" SumBuffer="false"/>
         <frac32 name="mod_by_velo" description="mod_by_velo" SumBuffer="false"/>
         <frac32 name="c_on_parent" description="c_on_parent" SumBuffer="false"/>
      </outlets>
      <displays/>
      <params>
         <frac32.u.map name="on__parent">
            <MinValue v="0.0"/>
            <MaxValue v="63.5"/>
         </frac32.u.map>
      </params>
      <attribs>
         <combo name="poly">
            <MenuEntries>
               <string>1</string>
               <string>2</string>
               <string>3</string>
               <string>4</string>
               <string>5</string>
               <string>6</string>
               <string>7</string>
               <string>8</string>
               <string>9</string>
               <string>10</string>
               <string>11</string>
               <string>12</string>
               <string>13</string>
               <string>14</string>
               <string>15</string>
               <string>16</string>
            </MenuEntries>
            <CEntries>
               <string>1</string>
               <string>2</string>
               <string>3</string>
               <string>4</string>
               <string>5</string>
               <string>6</string>
               <string>7</string>
               <string>8</string>
               <string>9</string>
               <string>10</string>
               <string>11</string>
               <string>12</string>
               <string>13</string>
               <string>14</string>
               <string>15</string>
               <string>16</string>
            </CEntries>
         </combo>
      </attribs>
      <code.declaration><![CDATA[   static const int32_t * GetInitParams(void){
      static const int32_t p[2]= {
      0,
      2097152
      };
      return &p[0];
   }    static const int NPEXCH = 2;
    ParameterExchange_t PExch[NPEXCH];
    int displayVector[3];
    static const int NPRESETS = 8;
    static const int NPRESET_ENTRIES = 32;
    static const int NMODULATIONSOURCES = 8;
    static const int NMODULATIONTARGETS = 8;
    PExModulationTarget_t PExModulationSources[NMODULATIONSOURCES][NMODULATIONTARGETS];
   static const int32_t * GetPresets(void){
      static const int32_t p[NPRESETS][NPRESET_ENTRIES][2] = {
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         },
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         },
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         },
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         },
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         },
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         },
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         },
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         }
      };
   return &p[0][0][0];
   };
void ApplyPreset(int index){
   index--;
   if (index < NPRESETS) {
     PresetParamChange_t *pa = (PresetParamChange_t *)(GetPresets());
     PresetParamChange_t *p = &pa[index*NPRESET_ENTRIES];
       int i;
       for(i=0;i<NPRESET_ENTRIES;i++){
         PresetParamChange_t *pp = &p[i];
           if ((pp->pexIndex>=0)&&(pp->pexIndex<NPEXCH)) {
               int v = pp->value - PExch[pp->pexIndex].value;
               PExch[pp->pexIndex].value = pp->value;
               PExch[pp->pexIndex].modvalue +=v;
               PExch[pp->pexIndex].signals = 0xFFEF;
               if (PExch[pp->pexIndex].pfunction) {
                  PExch[pp->pexIndex].finalvalue = (PExch[pp->pexIndex].pfunction)(PExch[pp->pexIndex].modvalue,pp->pexIndex);
               } else {
                  PExch[pp->pexIndex].finalvalue = PExch[pp->pexIndex].modvalue;
               }
           }
           else break;
       }
   }
}
class voice {
   public:
   int polyIndex;
    static const int NPEXCH = 2;
    ParameterExchange_t PExch[NPEXCH];
    int displayVector[3];
    static const int NPRESETS = 8;
    static const int NPRESET_ENTRIES = 32;
    static const int NMODULATIONSOURCES = 8;
    static const int NMODULATIONTARGETS = 8;
    PExModulationTarget_t PExModulationSources[NMODULATIONSOURCES][NMODULATIONTARGETS];
/* modsource defines */
static const int MODULATOR_instancevelo = 0;
/* parameter instance indices */
static const int PARAM_INDEX_mod__by__velo_value = 0;
static const int PARAM_INDEX_on__parent_value = 1;
/* object classes */
class instancepolyindex1{
  public: // v1
  voice *parent2;
  public: void Init(voice * parent) {
parent2 = parent;
}
  public: void Dispose() {
}
  public: void dsp (int32_t & index  ){
index = parent2->polyIndex;

}
}
;class instancepolyIndexSum{
  public: // v1
  voice *parent2;
int32_t _outlet;

  public: void Init(voice * parent) {
parent2 = parent;
}
  public: void Dispose() {
}
  public: void dsp (int32_t  outlet  ){
  _outlet = outlet;

}
}
;class instancekeyb1{
  public: // v1
  voice *parent2;
int8_t _note;
uint8_t _gate;
uint8_t _velo;
uint8_t _rvelo;

  public: void Init(voice * parent) {
parent2 = parent;
_gate = 0;
_note = 0;

}
  public: void Dispose() {
}
  public: void dsp (int32_t  & note,
    int32_t  & gate,
    int32_t  & velocity,
    int32_t  & releaseVelocity  ){
note= _note<<21;
gate= _gate<<27;
velocity= _velo<<20;
releaseVelocity= _rvelo<<20;

}
void MidiInNoteOn(uint8_t channel, uint8_t note, uint8_t velocity){
{
_velo = velocity;
_note = note-64;
_gate = 1;
}
}
void MidiInNoteOff(uint8_t channel, uint8_t note, uint8_t velocity){
{
if (_note == note-64) {
   _rvelo = velocity;
   _gate = 0;
}
}
}
void MidiInResetControllers(uint8_t channel){
{
   _gate = 0;
}
}
void MidiInAllNotesOff(uint8_t channel){
{
   _gate = 0;
}
}
}
;class instancevelo{
  public: // v1
  voice *parent2;
int ntrig;

  public: void Init(voice * parent) {
parent2 = parent;
int i;
for(i=0;i<NMODULATIONTARGETS;i++)
   parent2->PExModulationSources[MODULATOR_instancevelo][i].PEx = 0;

}
  public: void Dispose() {
}
  public: void dsp (int32_t  v,
    int32_t  trig  ){
if ((trig>0) && !ntrig) {PExModulationSourceChange(&parent2->PExModulationSources[MODULATOR_instancevelo][0],NMODULATIONTARGETS,v);  ntrig=1;}
if (!(trig>0)) ntrig=0;

}
}
;class instancec11{
  public: // v1
  voice *parent2;
  public: void Init(voice * parent) {
parent2 = parent;
}
  public: void Dispose() {
}
  public: void dsp (int32_t & o  ){
o= 1;

}
}
;class instanceoneSum{
  public: // v1
  voice *parent2;
int32_t _outlet;

  public: void Init(voice * parent) {
parent2 = parent;
}
  public: void Dispose() {
}
  public: void dsp (int32_t  outlet  ){
  _outlet = outlet;

}
}
;class instancemod__by__velo{
  public: // v1
  voice *parent2;
KeyValuePair KVP_instancemod__by__velo_value;
  public: void Init(voice * parent) {
parent2 = parent;
  parent2->PExModulationSources[MODULATOR_instancevelo][0].PEx = &parent2->PExch[0];
  parent2->PExModulationSources[MODULATOR_instancevelo][0].amount = 41943040;
  parent2->PExModulationSources[MODULATOR_instancevelo][0].prod = 0;
}
  public: void Dispose() {
}
  public: void dsp (int32_t  & out  ){
out= parent2->PExch[0].finalvalue;

}
}
;class instancemod__by__velo{
  public: // v1
  voice *parent2;
int32_t _outlet;

  public: void Init(voice * parent) {
parent2 = parent;
}
  public: void Dispose() {
}
  public: void dsp (int32_t  outlet  ){
  _outlet = outlet;

}
}
;class instanceon__parent{
  public: // v1
  voice *parent2;
KeyValuePair KVP_instanceon__parent_value;
  public: void Init(voice * parent) {
parent2 = parent;
}
  public: void Dispose() {
}
  public: void dsp (int32_t  & out  ){
out= parent2->common->%on__parent%;

}
}
;class instancec__on__parent{
  public: // v1
  voice *parent2;
int32_t _outlet;

  public: void Init(voice * parent) {
parent2 = parent;
}
  public: void Dispose() {
}
  public: void dsp (int32_t  outlet  ){
  _outlet = outlet;

}
}
;/* object instances */
     instancepolyindex1 instancepolyindex1_i;
     instancepolyIndexSum instancepolyIndexSum_i;
     instancekeyb1 instancekeyb1_i;
     instancevelo instancevelo_i;
     instancec11 instancec11_i;
     instanceoneSum instanceoneSum_i;
     instancemod__by__velo instancemod__by__velo_i;
     instancemod__by__velo instancemod__by__velo_i;
     instanceon__parent instanceon__parent_i;
     instancec__on__parent instancec__on__parent_i;
/* net latches */
%parent% *common;
void Init(voice *parent) {
   instancepolyindex1_i.Init(parent);
   instancepolyIndexSum_i.Init(parent);
   instancekeyb1_i.Init(parent);
   instancevelo_i.Init(parent);
   instancec11_i.Init(parent);
   instanceoneSum_i.Init(parent);
   instancemod__by__velo_i.Init(parent);
   instancemod__by__velo_i.Init(parent);
   instanceon__parent_i.Init(parent);
   instancec__on__parent_i.Init(parent);
}

void dsp (void) {
 int i;
//--------- <nets> -----------//
    int32_t net0;
    int32_t net1;
    int32_t  net2;
    int32_t  net3;
    int32_t  net4;
    int32_t  net5;
//--------- </nets> ----------//
//--------- <zero> ----------//
  int32_t UNCONNECTED_OUTPUT;
  int32_t UNCONNECTED_INPUT=0;
  int32buffer zerobuffer;
  for(i=0;i<BUFSIZE;i++) zerobuffer[i]=0;
  int32buffer UNCONNECTED_OUTPUT_BUFFER;
//--------- </zero> ----------//
//--------- <object calls> ----------//
  instancepolyindex1_i.dsp(net0);
  instancepolyIndexSum_i.dsp((net0<<21));
  instancekeyb1_i.dsp(UNCONNECTED_OUTPUT, net3, net4, UNCONNECTED_OUTPUT);
  instancevelo_i.dsp(net4, net3);
  instancec11_i.dsp(net1);
  instanceoneSum_i.dsp((net1<<21));
  instancemod__by__velo_i.dsp(net2);
  instancemod__by__velo_i.dsp(net2);
  instanceon__parent_i.dsp(net5);
  instancec__on__parent_i.dsp(net5);
//--------- </object calls> ----------//
//--------- <net latch copy> ----------//
//--------- </net latch copy> ----------//
}
void PatchMidiInControlChange(uint8_t channel, uint8_t cc, uint8_t val){
   if (channel == MIDICHANNEL){
   }
}

void PatchMidiInNoteOn(uint8_t channel, uint8_t note, uint8_t velocity){
   if (channel == MIDICHANNEL){
instancekeyb1_i.MidiInNoteOn(channel, note, velocity);
   }
}

void PatchMidiInNoteOff(uint8_t channel, uint8_t note, uint8_t velocity){
   if (channel == MIDICHANNEL){
instancekeyb1_i.MidiInNoteOff(channel, note, velocity);
   }
}

void PatchMidiInPitchBend(uint8_t channel, uint8_t data1, uint8_t data2){
   if (channel == MIDICHANNEL){
   }
}

void PatchMidiInAllNotesOff(uint8_t channel){
   if (channel == MIDICHANNEL){
instancekeyb1_i.MidiInAllNotesOff(channel);
   }
}

void PatchMidiInResetControllers(uint8_t channel){
   if (channel == MIDICHANNEL){
   }
   }
};
static voice * getVoices(void){
     static voice v[%poly%];
    return v;
}
static int32_t PropagateToVoices(int32_t modvalue, int32_t index) {
    if ((index>=0)&&(index<NPEXCH)) {
       int vi;
       for(vi=0;vi<%poly%;vi++){
         ParameterExchange_t *pex = &(getVoices()[vi].PExch[index]);
         pex->modvalue -= pex->value;
         pex->value = modvalue;
         pex->modvalue += modvalue;
         pex->signals = 0xFFFFFFEE;
//         if (pex->pfunction) {
//          pex->finalvalue =  (pex->pfunction)(pex->modvalue,index);
//         } else {
           pex->finalvalue = pex->modvalue;
//         }
       }
    }
    return modvalue;
}
int8_t notePlaying[%poly%];
int32_t voicePriority[%poly%];
int32_t priority;
]]></code.declaration>
      <code.init><![CDATA[   int i;
   int j;
   const int32_t *p;
   p = GetInitParams();
   for(j=0;j<2;j++){
      PExch[j].value = p[j];
      PExch[j].modvalue = p[j];
      PExch[j].signals = 0;
      PExch[j].pfunction = 0;
      PExch[j].finalvalue = p[j];
   }
     displayVector[0] = 0x446F7841;
     displayVector[1] = 0;
     displayVector[2] = 0;
int k;
   for(k=0;k<NPEXCH;k++){
      PExch[k].pfunction = PropagateToVoices;
   }int vi; for(vi=0;vi<%poly%;vi++) {
   voice *v = &getVoices()[vi];
   v->polyIndex = vi;
   v->common = this;
   v->Init(&getVoices()[vi]);
   notePlaying[vi]=0;
   voicePriority[vi]=0;
   for (j = 0; j < v->NPEXCH; j++) {
      v->PExch[j].value = p[j];
      v->PExch[j].modvalue = p[j];
      v->PExch[j].signals = 0;
      v->PExch[j].pfunction = 0;
      v->PExch[j].finalvalue = p[j];
   }
}
priority=0;
]]></code.init>
      <code.krate><![CDATA[   %polyIndexSum% = 0;
   %oneSum% = 0;
   %mod_by_velo% = 0;
   %c_on_parent% = 0;
int vi; for(vi=0;vi<%poly%;vi++) {getVoices()[vi].dsp();
   %polyIndexSum% += getVoices()[vi].instancepolyIndexSum_i._outlet;
   %oneSum% += getVoices()[vi].instanceoneSum_i._outlet;
   %mod_by_velo% += getVoices()[vi].instancemod__by__velo_i._outlet;
   %c_on_parent% += getVoices()[vi].instancec__on__parent_i._outlet;
}
]]></code.krate>
      <code.midicc><![CDATA[int i;   for(i=0;i<%poly%;i++) getVoices()[i].PatchMidiInControlChange(channel, cc, val);
]]></code.midicc>
      <code.midinoteon><![CDATA[        int min = 1<<30;
        int mini = 0;
        int i;
        for(i=0;i<%poly%;i++){
          if (voicePriority[i] < min){
            min = voicePriority[i];
            mini = i;
          }
        }
voicePriority[mini] = 10000+priority++;
notePlaying[mini] = note;
getVoices()[mini].PatchMidiInNoteOn(channel, note, velocity);
]]></code.midinoteon>
      <code.midinoteoff><![CDATA[int i;
for(i=0;i<%poly%;i++){
      if (notePlaying[i] == note){
        getVoices()[i].PatchMidiInNoteOff(channel, note, velocity);
        voicePriority[i] = priority++;
        notePlaying[i] = -1;
}
}
]]></code.midinoteoff>
   </obj.normal>
</objdefs>