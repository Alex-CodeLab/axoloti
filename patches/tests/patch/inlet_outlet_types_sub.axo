<objdefs>
   <obj.normal id="inlet_outlet_types_sub">
      <sDescription>C:\Users\jtaelman\Documents\GitHub\AxoStudio\patches\tests\inlet_outlet_types_sub.axp</sDescription>
      <inlets>
         <frac32 name="inlet_frac" description="inlet_frac"/>
         <bool32 name="inlet_bool" description="inlet_bool"/>
         <int32 name="inlet_int" description="inlet_int"/>
         <frac32buffer name="inlet_buffer" description="inlet_buffer"/>
      </inlets>
      <outlets>
         <frac32 name="outlet_frac" description="outlet_frac" SumBuffer="false"/>
         <bool32 name="outlet_bool" description="outlet_bool" SumBuffer="false"/>
         <int32 name="outlet_int" description="outlet_int" SumBuffer="false"/>
         <frac32buffer name="outlet_buffer" description="outlet_buffer" SumBuffer="false"/>
      </outlets>
      <displays/>
      <params/>
      <attribs/>
      <code.declaration><![CDATA[    static const int NPEXCH = 0;
    ParameterExchange_t PExch[NPEXCH];
    int displayVector[3];
    static const int NPRESETS = 0;
    static const int NPRESET_ENTRIES = 0;
    static const int NMODULATIONSOURCES = 0;
    static const int NMODULATIONTARGETS = 0;
    PExModulationTarget_t PExModulationSources[NMODULATIONSOURCES][NMODULATIONTARGETS];
     int32buffer inputLeft;
     int32buffer inputRight;
     int32buffer outputLeft;
     int32buffer outputRight;
/* modsource defines */
/* parameter instance indices */
/* object classes */
class instanceinlet__frac{
  public: // v1
  %parent% *parent2;
int32_t _inlet;

  public: void Init(%parent% * parent) {
parent2 = parent;
}
  public: void Dispose() {
}
  public: void dsp (int32_t  & inlet  ){
  inlet = _inlet;

}
}
;class instanceoutlet__frac{
  public: // v1
  %parent% *parent2;
int32_t _outlet;

  public: void Init(%parent% * parent) {
parent2 = parent;
}
  public: void Dispose() {
}
  public: void dsp (int32_t  outlet  ){
  _outlet = outlet;

}
}
;class instanceinlet__bool{
  public: // v1
  %parent% *parent2;
int32_t _inlet;

  public: void Init(%parent% * parent) {
parent2 = parent;
}
  public: void Dispose() {
}
  public: void dsp (int32_t  & inlet  ){
  inlet = _inlet;

}
}
;class instanceoutlet__bool{
  public: // v1
  %parent% *parent2;
int32_t _outlet;

  public: void Init(%parent% * parent) {
parent2 = parent;
}
  public: void Dispose() {
}
  public: void dsp (int32_t  outlet  ){
  _outlet = outlet;

}
}
;class instanceinlet__int{
  public: // v1
  %parent% *parent2;
int32_t _inlet;

  public: void Init(%parent% * parent) {
parent2 = parent;
}
  public: void Dispose() {
}
  public: void dsp (int32_t & inlet  ){
  inlet = _inlet;

}
}
;class instanceoutlet__int{
  public: // v1
  %parent% *parent2;
int32_t _outlet;

  public: void Init(%parent% * parent) {
parent2 = parent;
}
  public: void Dispose() {
}
  public: void dsp (int32_t outlet  ){
  _outlet = outlet;

}
}
;class instanceinlet__buffer{
  public: // v1
  %parent% *parent2;
int32buffer _inlet;

  public: void Init(%parent% * parent) {
parent2 = parent;
}
  public: void Dispose() {
}
  public: void dsp (int32buffer  & inlet  ){
int buffer_index;
for(buffer_index=0;buffer_index<BUFSIZE;buffer_index++) {
   inlet[buffer_index] = _inlet[buffer_index];
}
}
}
;class instanceoutlet__buffer{
  public: // v1
  %parent% *parent2;
int32buffer _outlet;

  public: void Init(%parent% * parent) {
parent2 = parent;
}
  public: void Dispose() {
}
  public: void dsp (int32buffer  outlet  ){
int buffer_index;
for(buffer_index=0;buffer_index<BUFSIZE;buffer_index++) {
   _outlet[buffer_index] = outlet[buffer_index];

}
}
}
;/* object instances */
     instanceinlet__frac instanceinlet__frac_i;
     instanceoutlet__frac instanceoutlet__frac_i;
     instanceinlet__bool instanceinlet__bool_i;
     instanceoutlet__bool instanceoutlet__bool_i;
     instanceinlet__int instanceinlet__int_i;
     instanceoutlet__int instanceoutlet__int_i;
     instanceinlet__buffer instanceinlet__buffer_i;
     instanceoutlet__buffer instanceoutlet__buffer_i;
/* net latches */
   static const int32_t * GetInitParams(void){
      static const int32_t p[0]= {
      };
      return &p[0];
   }   static const int32_t * GetPresets(void){
      static const int32_t p[NPRESETS][NPRESET_ENTRIES][2] = {
      };
   return &p[0][0][0];
   };
void ApplyPreset(int index){
   index--;
   if (index < NPRESETS) {
     PresetParamChange_t *pa = (PresetParamChange_t *)(GetPresets());
     PresetParamChange_t *p = &pa[index*NPRESET_ENTRIES];
       int i;
       for(i=0;i<NPRESET_ENTRIES;i++){
         PresetParamChange_t *pp = &p[i];
           if ((pp->pexIndex>=0)&&(pp->pexIndex<NPEXCH)) {
               int v = pp->value - PExch[pp->pexIndex].value;
               PExch[pp->pexIndex].value = pp->value;
               PExch[pp->pexIndex].modvalue +=v;
               PExch[pp->pexIndex].signals = 0xFFEF;
               if (PExch[pp->pexIndex].pfunction) {
                  PExch[pp->pexIndex].finalvalue = (PExch[pp->pexIndex].pfunction)(PExch[pp->pexIndex].modvalue,pp->pexIndex);
               } else {
                  PExch[pp->pexIndex].finalvalue = PExch[pp->pexIndex].modvalue;
               }
           }
           else break;
       }
   }
}
]]></code.declaration>
      <code.init><![CDATA[   instanceinlet__frac_i.Init(this);
   instanceoutlet__frac_i.Init(this);
   instanceinlet__bool_i.Init(this);
   instanceoutlet__bool_i.Init(this);
   instanceinlet__int_i.Init(this);
   instanceoutlet__int_i.Init(this);
   instanceinlet__buffer_i.Init(this);
   instanceoutlet__buffer_i.Init(this);
   int i;
   int j;
   const int32_t *p;
   p = GetInitParams();
   for(j=0;j<0;j++){
      PExch[j].value = p[j];
      PExch[j].modvalue = p[j];
      PExch[j].signals = 0;
      PExch[j].pfunction = 0;
      PExch[j].finalvalue = p[j];
   }
     displayVector[0] = 0x446F7841;
     displayVector[1] = 0;
     displayVector[2] = 0;
]]></code.init>
      <code.krate><![CDATA[int i; /*...*/
   instanceinlet__frac_i._inlet = %inlet_frac%;
   instanceinlet__bool_i._inlet = %inlet_bool%;
   instanceinlet__int_i._inlet = %inlet_int%;
   for(i=0;i<BUFSIZE;i++) instanceinlet__buffer_i._inlet[i] = %inlet_buffer%[i];
//--------- <nets> -----------//
    int32_t  net0;
    int32_t  net1;
    int32_t net2;
    int32buffer  net3;
//--------- </nets> ----------//
//--------- <zero> ----------//
  int32_t UNCONNECTED_OUTPUT;
  int32_t UNCONNECTED_INPUT=0;
  int32buffer zerobuffer;
  for(i=0;i<BUFSIZE;i++) zerobuffer[i]=0;
  int32buffer UNCONNECTED_OUTPUT_BUFFER;
//--------- </zero> ----------//
//--------- <object calls> ----------//
  instanceinlet__frac_i.dsp(net0);
  instanceoutlet__frac_i.dsp(net0);
  instanceinlet__bool_i.dsp(net1);
  instanceoutlet__bool_i.dsp(net1);
  instanceinlet__int_i.dsp(net2);
  instanceoutlet__int_i.dsp(net2);
  instanceinlet__buffer_i.dsp(net3);
  instanceoutlet__buffer_i.dsp(net3);
//--------- </object calls> ----------//
//--------- <net latch copy> ----------//
//--------- </net latch copy> ----------//
   %outlet_frac% = instanceoutlet__frac_i._outlet;
   %outlet_bool% = instanceoutlet__bool_i._outlet;
   %outlet_int% = instanceoutlet__int_i._outlet;
      for(i=0;i<BUFSIZE;i++) %outlet_buffer%[i] = instanceoutlet__buffer_i._outlet[i];
]]></code.krate>
      <code.midicc><![CDATA[   if (channel == MIDICHANNEL){
   }
]]></code.midicc>
      <code.midinoteon><![CDATA[   if (channel == MIDICHANNEL){
   }
]]></code.midinoteon>
      <code.midinoteoff><![CDATA[   if (channel == MIDICHANNEL){
   }
]]></code.midinoteoff>
   </obj.normal>
</objdefs>